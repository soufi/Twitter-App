<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_43) on Sun Mar 17 19:03:54 CET 2013 -->
<TITLE>
AnalyseData
</TITLE>

<META NAME="date" CONTENT="2013-03-17">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="AnalyseData";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/AnalyseData.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;PREV CLASS&nbsp;
&nbsp;<A HREF="../partie1/Main.html" title="class in partie1"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../index.html?partie1/AnalyseData.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="AnalyseData.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
partie1</FONT>
<BR>
Class AnalyseData</H2>
<PRE>
java.lang.Object
  <IMG SRC="../resources/inherit.gif" ALT="extended by "><B>partie1.AnalyseData</B>
</PRE>
<HR>
<DL>
<DT><PRE>public class <B>AnalyseData</B><DT>extends java.lang.Object</DL>
</PRE>

<P>
Permet de detecter les capitaliste sociaux à partir d'un fichier contenant toutes les relations des individus que nous devons traité
 le forme du fichier qu'on peut traité avec cette class est : source -> destination
 c'est-à-dire que source suit destination
<P>

<P>
<DL>
<DT><B>Author:</B></DT>
  <DD>Souf</DD>
</DL>
<HR>

<P>

<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../partie1/AnalyseData.html#AnalyseData()">AnalyseData</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>private static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../partie1/AnalyseData.html#category(java.util.HashSet, java.util.HashSet, java.util.HashSet, java.util.HashSet, java.util.HashSet, java.lang.Integer)">category</A></B>(java.util.HashSet&lt;java.lang.Integer&gt;&nbsp;both,
         java.util.HashSet&lt;java.lang.Integer&gt;&nbsp;ifyfm,
         java.util.HashSet&lt;java.lang.Integer&gt;&nbsp;fmify,
         java.util.HashSet&lt;java.lang.String&gt;&nbsp;followers,
         java.util.HashSet&lt;java.lang.String&gt;&nbsp;folloween,
         java.lang.Integer&nbsp;user)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lit l'intersection, verifie s'il y a au moins 1000 utilisateurs, et ajoute l'utilisateur dans la collection result
 a noter que cette fonction supprime les information contenu dans les deux collection Set, après avoir effectué le traitement.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>private static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../partie1/AnalyseData.html#convertStreamToString(java.io.InputStream)">convertStreamToString</A></B>(java.io.InputStream&nbsp;is)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Permet de convertir InputStream en String</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../partie1/AnalyseData.html#correctCursor(java.io.BufferedReader, java.io.BufferedReader, java.lang.String[], java.lang.String[])">correctCursor</A></B>(java.io.BufferedReader&nbsp;buf1,
              java.io.BufferedReader&nbsp;buf2,
              java.lang.String[]&nbsp;line_fich1,
              java.lang.String[]&nbsp;line_fich2)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alligne les cursor des deux buffer sur la meme valeur de la ligne pour correspondre au même individu</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../partie1/AnalyseData.html#detect(java.lang.String)">detect</A></B>(java.lang.String&nbsp;file_in)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;permet de detecter les capitalistes sociaux contenus dans le fichie file passé en parametre</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../partie1/AnalyseData.html#execShellScript(java.lang.String, java.lang.String)">execShellScript</A></B>(java.lang.String&nbsp;file,
                java.lang.String&nbsp;param)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Permet d'executer un script shell à partir de son chemin</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../partie1/AnalyseData.html#extract(java.io.BufferedReader, java.util.HashSet, java.lang.Integer)">extract</A></B>(java.io.BufferedReader&nbsp;buf,
        java.util.HashSet&lt;java.lang.String&gt;&nbsp;result,
        java.lang.Integer&nbsp;element)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;extrait du buffer toutes les lignes qui correspondent a l'individu element
 il faut noter que si le programme tombe sur des lignes qui correspondent à un individu avec un id inférieur à ce lui passé en paramètre
 le programme saute l'individu en esperant tomber sur le prochain qui correspondera à element. retourne la premiere ligne de l'individu suivant, ou supérieur 
 a l'element</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../partie1/AnalyseData.html#nextID(java.io.BufferedReader, java.lang.Integer)">nextID</A></B>(java.io.BufferedReader&nbsp;buf,
       java.lang.Integer&nbsp;element)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parcour le fichier et envoi la premiere ligne qui arrive après les informations de l'individu element
 les fichiers utilisé sont sensé etre trié</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>private static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../partie1/AnalyseData.html#write(java.io.BufferedWriter, java.util.HashSet, java.lang.String)">write</A></B>(java.io.BufferedWriter&nbsp;buf,
      java.util.HashSet&lt;java.lang.Integer&gt;&nbsp;individus,
      java.lang.String&nbsp;type)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecrit sur le buffer de sortie avec la forme suivante :
                idCapitaliste1       typeCapitaliste1 
                idCapitaliste2           typeCapitaliste2 
                ...                                      ...</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.Object</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="AnalyseData()"><!-- --></A><H3>
AnalyseData</H3>
<PRE>
public <B>AnalyseData</B>()</PRE>
<DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="detect(java.lang.String)"><!-- --></A><H3>
detect</H3>
<PRE>
public static void <B>detect</B>(java.lang.String&nbsp;file_in)</PRE>
<DL>
<DD>permet de detecter les capitalistes sociaux contenus dans le fichie file passé en parametre
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>file_in</CODE> - : fichier des individus et leurs relation sous la forme source -> destination</DL>
</DD>
</DL>
<HR>

<A NAME="category(java.util.HashSet, java.util.HashSet, java.util.HashSet, java.util.HashSet, java.util.HashSet, java.lang.Integer)"><!-- --></A><H3>
category</H3>
<PRE>
private static void <B>category</B>(java.util.HashSet&lt;java.lang.Integer&gt;&nbsp;both,
                             java.util.HashSet&lt;java.lang.Integer&gt;&nbsp;ifyfm,
                             java.util.HashSet&lt;java.lang.Integer&gt;&nbsp;fmify,
                             java.util.HashSet&lt;java.lang.String&gt;&nbsp;followers,
                             java.util.HashSet&lt;java.lang.String&gt;&nbsp;folloween,
                             java.lang.Integer&nbsp;user)</PRE>
<DL>
<DD>lit l'intersection, verifie s'il y a au moins 1000 utilisateurs, et ajoute l'utilisateur dans la collection result
 a noter que cette fonction supprime les information contenu dans les deux collection Set, après avoir effectué le traitement.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>both</CODE> - : HashSet <Integer> contenant que les individus capitaliste des deux types fmify et ifyfm<DD><CODE>ifyfm</CODE> - : HashSet <Integer> contenant que les individus de type "I Follow You Follow Me"<DD><CODE>fmify</CODE> - : HashSet <Integer> contenant que les individus de type "Follow Me I Follow You"<DD><CODE>followers</CODE> - : la liste des followers de l'individu traité<DD><CODE>folloween</CODE> - : la liste des folloween de l'individu traité<DD><CODE>user</CODE> - : l'individu traite</DL>
</DD>
</DL>
<HR>

<A NAME="extract(java.io.BufferedReader, java.util.HashSet, java.lang.Integer)"><!-- --></A><H3>
extract</H3>
<PRE>
public static java.lang.String[] <B>extract</B>(java.io.BufferedReader&nbsp;buf,
                                         java.util.HashSet&lt;java.lang.String&gt;&nbsp;result,
                                         java.lang.Integer&nbsp;element)
                                  throws java.io.IOException</PRE>
<DL>
<DD>extrait du buffer toutes les lignes qui correspondent a l'individu element
 il faut noter que si le programme tombe sur des lignes qui correspondent à un individu avec un id inférieur à ce lui passé en paramètre
 le programme saute l'individu en esperant tomber sur le prochain qui correspondera à element. retourne la premiere ligne de l'individu suivant, ou supérieur 
 a l'element
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>buf</CODE> - <DD><CODE>result</CODE> - <DD><CODE>element</CODE> - 
<DT><B>Returns:</B><DD>Integer [] : tableau avec deux cases contenant l'id et le follower de l'id
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="nextID(java.io.BufferedReader, java.lang.Integer)"><!-- --></A><H3>
nextID</H3>
<PRE>
public static java.lang.String[] <B>nextID</B>(java.io.BufferedReader&nbsp;buf,
                                        java.lang.Integer&nbsp;element)
                                 throws java.lang.NumberFormatException,
                                        java.io.IOException</PRE>
<DL>
<DD>parcour le fichier et envoi la premiere ligne qui arrive après les informations de l'individu element
 les fichiers utilisé sont sensé etre trié
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>buf</CODE> - <DD><CODE>element</CODE> - 
<DT><B>Returns:</B><DD>String [2] : case 1 contient l'id et la case 2 le follower ou folloween de l'id celon le buffer traité
<DT><B>Throws:</B>
<DD><CODE>java.lang.NumberFormatException</CODE>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="correctCursor(java.io.BufferedReader, java.io.BufferedReader, java.lang.String[], java.lang.String[])"><!-- --></A><H3>
correctCursor</H3>
<PRE>
public static java.lang.String[] <B>correctCursor</B>(java.io.BufferedReader&nbsp;buf1,
                                               java.io.BufferedReader&nbsp;buf2,
                                               java.lang.String[]&nbsp;line_fich1,
                                               java.lang.String[]&nbsp;line_fich2)
                                        throws java.io.IOException</PRE>
<DL>
<DD>alligne les cursor des deux buffer sur la meme valeur de la ligne pour correspondre au même individu
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>buf1</CODE> - : buffer correspondant au spl1<DD><CODE>buf2</CODE> - : buffer correspondant au spl2<DD><CODE>line_fich1</CODE> - : tableau a deux case 
 case 0 : contient le numéro de l'individu
 case 1 : contient la destination pour le fichier de folloween<DD><CODE>line_fich2</CODE> - case 0 : contient le numéro de l'individu
 case 1 : contient le numéro de la destination pour le fichier de followers
<DT><B>Returns:</B><DD>un tableau a 4 case qui est la somme de deux tableaux de deux cases de la meme forme que la fonction Extract.
 en d'autre mots, les deux premiere case sont les information srce -> dest de la permiere ligne d'un individu du fichier folloween, et
 les deux dernière cases de la même forme pour le fichier followers.
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="write(java.io.BufferedWriter, java.util.HashSet, java.lang.String)"><!-- --></A><H3>
write</H3>
<PRE>
private static void <B>write</B>(java.io.BufferedWriter&nbsp;buf,
                          java.util.HashSet&lt;java.lang.Integer&gt;&nbsp;individus,
                          java.lang.String&nbsp;type)
                   throws java.io.IOException</PRE>
<DL>
<DD>Ecrit sur le buffer de sortie avec la forme suivante :
                idCapitaliste1       typeCapitaliste1 
                idCapitaliste2           typeCapitaliste2 
                ...                                      ...
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>buf</CODE> - <DD><CODE>individus</CODE> - <DD><CODE>type</CODE> - 
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="execShellScript(java.lang.String, java.lang.String)"><!-- --></A><H3>
execShellScript</H3>
<PRE>
public static java.lang.String <B>execShellScript</B>(java.lang.String&nbsp;file,
                                               java.lang.String&nbsp;param)
                                        throws java.io.IOException,
                                               java.lang.InterruptedException</PRE>
<DL>
<DD>Permet d'executer un script shell à partir de son chemin
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>file</CODE> - : le script a executer<DD><CODE>param</CODE> - : le parametre du script
<DT><B>Returns:</B><DD>String : contenant le retour de l'execution du script
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE>
<DD><CODE>java.lang.InterruptedException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="convertStreamToString(java.io.InputStream)"><!-- --></A><H3>
convertStreamToString</H3>
<PRE>
private static java.lang.String <B>convertStreamToString</B>(java.io.InputStream&nbsp;is)
                                               throws java.io.IOException</PRE>
<DL>
<DD>Permet de convertir InputStream en String
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>is</CODE> - 
<DT><B>Returns:</B><DD>String
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE><DT><B>See Also:</B><DD><CODE>http://www.dzone.com/snippets/convert-stream-string</CODE></DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/AnalyseData.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;PREV CLASS&nbsp;
&nbsp;<A HREF="../partie1/Main.html" title="class in partie1"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../index.html?partie1/AnalyseData.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="AnalyseData.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
